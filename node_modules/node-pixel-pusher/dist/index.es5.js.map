{"version":3,"file":"index.es5.js","sources":["../src/lib/Device.ts","../src/lib/Service.ts"],"sourcesContent":["import DeviceData from './DeviceData';\n\nconst SEQUENCE_DENOTATION_LENGTH = 4;\nconst STRIP_DENOTATION_LENGTH = 1;\n\nconst NS_PER_SEC = 1e9;\nconst MS_PER_NS = 1e-6;\n\nexport default class Device {\n  public deviceData: DeviceData;\n\n  public readonly stripPacketData: {\n    packetIndex: number;\n    dataOffset: number;\n    rgbaOffset: number;\n  }[];\n\n  private packetBuffer: Buffer[];\n  private packetIndex: number = 0;\n  private packetSequenceNumber: number = 1;\n  private packetsPerRefresh: number = 1;\n  private minimumUpdatePeriod: number = 0;\n\n  public readonly stripDataSize: number = 0;\n  private renderfn: () => boolean | void = () => {};\n  private shouldRender: boolean = false;\n\n  constructor(deviceData: DeviceData) {\n    this.deviceData = deviceData;\n\n    this.packetBuffer = [];\n    this.stripPacketData = [];\n\n    this.stripDataSize = this.deviceData.pixelsPerStrip * 3;\n\n    this.packetsPerRefresh = Math.ceil(this.deviceData.numberStrips / this.deviceData.stripsPerPkt);\n\n    for (let p = 0; p < this.packetsPerRefresh; p++) {\n      let stripOffset = this.deviceData.stripsPerPkt * p;\n\n      let stripCount = Math.min(\n        this.deviceData.stripsPerPkt,\n        this.deviceData.numberStrips - stripOffset\n      );\n\n      let packetSize =\n        SEQUENCE_DENOTATION_LENGTH + stripCount * (STRIP_DENOTATION_LENGTH + this.stripDataSize);\n\n      let packet = (this.packetBuffer[p] = Buffer.alloc(packetSize));\n      packet.fill(0x00);\n\n      let pos = 4;\n      let slen = stripOffset + stripCount;\n      for (let s = stripOffset; s < slen; s++) {\n        packet.writeUInt8(s, pos);\n        // increment after writing UInt8\n        pos += 1;\n        this.stripPacketData.push({\n          packetIndex: p,\n          dataOffset: pos,\n          rgbaOffset: s * this.deviceData.pixelsPerStrip * 4\n        });\n        // increment to skip strip data\n        pos += this.stripDataSize;\n      }\n    }\n\n    this.fullRefreshTick = this.fullRefreshTick.bind(this);\n  }\n\n  setRGBABuffer(data: Buffer | Uint8ClampedArray) {\n    if (data.length !== this.deviceData.numberStrips * this.deviceData.pixelsPerStrip * 4) {\n      console.log('Invalid buffer size');\n      return;\n    }\n\n    for (let y = 0; y < this.deviceData.numberStrips; y++) {\n      let meta = this.stripPacketData[y];\n      let target = this.packetBuffer[meta.packetIndex];\n\n      for (var i = 0, j = 0; i < this.stripDataSize; i += 3, j += 4) {\n        target[meta.dataOffset + i] = data[meta.rgbaOffset + j];\n        target[meta.dataOffset + i + 1] = data[meta.rgbaOffset + j + 1];\n        target[meta.dataOffset + i + 2] = data[meta.rgbaOffset + j + 2];\n      }\n    }\n  }\n\n  sendPacket(packet: Buffer, deviceData: DeviceData): void {}\n\n  fullRefreshTick() {\n    let tickStartTime = process.hrtime();\n    let sendPacket = true;\n\n    if (!this.shouldRender) {\n      // Stop render loop\n      return;\n    }\n\n    if (this.packetIndex === 0) {\n      // Request render data\n      if (this.renderfn() === false) {\n        sendPacket = false;\n      }\n    }\n\n    if (sendPacket) {\n      let packet = this.packetBuffer[this.packetIndex];\n      packet.writeUInt32LE(this.packetSequenceNumber++, 0);\n      this.sendPacket(packet, this.deviceData);\n      this.packetIndex = (this.packetIndex + 1) % this.packetsPerRefresh;\n    }\n\n    const tickHRTime = process.hrtime(tickStartTime);\n    const tickMS = (tickHRTime[0] * NS_PER_SEC + tickHRTime[1]) * MS_PER_NS;\n\n    setTimeout(\n      this.fullRefreshTick,\n      Math.max(\n        // Don't go below update limit\n        this.minimumUpdatePeriod,\n        // Skip to next frame render if we're not sending packets\n        (sendPacket\n          ? this.deviceData.updatePeriod\n          : this.deviceData.updatePeriod * this.packetsPerRefresh) -\n          // Remove time used by render/packet sending\n          tickMS\n      )\n    );\n  }\n\n  setMaxFPS(maxFps: number) {\n    this.minimumUpdatePeriod = 1000 / maxFps / this.packetsPerRefresh;\n  }\n\n  startRendering(renderfn: () => boolean | void, maxFps?: number) {\n    let shouldStartRender = !this.shouldRender;\n\n    if (maxFps) {\n      this.setMaxFPS(maxFps);\n    }\n    this.renderfn = renderfn;\n\n    if (shouldStartRender) {\n      this.shouldRender = true;\n      this.fullRefreshTick();\n    }\n  }\n\n  stopRendering() {\n    this.shouldRender = false;\n  }\n}\n","import * as dgram from 'dgram';\nimport DeviceData from './DeviceData';\nimport Device from './Device';\nimport { AddressInfo } from 'net';\n\nimport { EventEmitter } from 'events';\n\nconst LISTENER_SOCKET_PORT: number = 7331;\n\nexport declare interface Service {\n  on(event: 'discover', listener: (controller: Device) => void): this;\n  on(event: string, listener: Function): this;\n}\n\nexport class Service extends EventEmitter {\n  private socket: dgram.Socket;\n  private devices: { [mac: string]: Device };\n\n  constructor() {\n    super();\n    this.devices = {};\n    this.socket = dgram.createSocket('udp4');\n    this.socket.on('message', this.onMessage.bind(this));\n    this.socket.on('listening', () => {\n      const address: AddressInfo = this.socket.address() as AddressInfo;\n      console.log('Socket listening for PixelPusher on udp://*:' + address.port);\n    });\n    this.socket.on('error', (err: Error) => {\n      console.log('Error opening socket to detect PixelPusher', err);\n    });\n    this.socket.bind(LISTENER_SOCKET_PORT);\n  }\n\n  close() {\n    this.socket.close();\n  }\n\n  onMessage(msg: Buffer, rinfo: dgram.RemoteInfo) {\n    if (msg.length < 48) {\n      return;\n    }\n\n    let mac: string = msg\n      .slice(0, 6)\n      .toString('hex')\n      .match(/.{2}/g)!\n      .join(':');\n\n    if (!mac) {\n      return;\n    }\n\n    let controller = this.devices[mac];\n    if (controller && controller.deviceData.deviceType === 2) {\n      // Already received message from this device\n\n      let cycleTime = msg.readUInt32LE(28) / 1000;\n      let delta = msg.readUInt32LE(36);\n\n      if (delta > 5) {\n        cycleTime += 5;\n      } else if (delta === 0 && cycleTime > 1) {\n        cycleTime -= 1;\n      }\n\n      controller.deviceData.updatePeriod = cycleTime;\n      controller.deviceData.powerTotal = msg.readUInt32LE(32);\n      controller.deviceData.deltaSequence = delta;\n\n      return;\n    }\n\n    let ipAddress: string = msg\n      .slice(6, 10)\n      .toString('hex')\n      .match(/.{2}/g)!\n      .map(function(x) {\n        return parseInt(x, 16);\n      })\n      .join('.');\n\n    if (!ipAddress) {\n      return;\n    }\n\n    let deviceType: number = msg[10];\n\n    if (deviceType !== 2) {\n      // Must be PixelPusher device type\n      return;\n    }\n\n    console.log(`PixelPusher Device discovered at ${ipAddress} [${mac}]`);\n\n    let deviceData: DeviceData = {\n      macAddress: mac,\n      ipAddress: ipAddress,\n      deviceType: msg[10],\n      protocolVrsn: msg[11],\n      vendorID: msg.readUInt16LE(12),\n      productID: msg.readUInt16LE(14),\n      hardwareRev: msg.readUInt16LE(16),\n      softwareRev: msg.readUInt16LE(18),\n      linkSpeed: msg.readUInt32LE(20),\n\n      numberStrips: msg[24],\n      stripsPerPkt: msg[25],\n      pixelsPerStrip: msg.readUInt16LE(26),\n      updatePeriod: msg.readUInt32LE(28) / 1000, // usec -> ms\n      powerTotal: msg.readUInt32LE(32),\n      deltaSequence: msg.readUInt32LE(36),\n      controllerNo: msg.readInt32LE(40),\n      groupNo: msg.readInt32LE(44),\n\n      myPort: 9761\n    };\n\n    if (msg.length >= 54) {\n      deviceData.artnetUniverse = msg.readUInt16LE(48);\n      deviceData.artnetChannel = msg.readUInt16LE(50);\n      deviceData.myPort = msg.readUInt16LE(52);\n    }\n\n    if (msg.length >= 62) {\n      deviceData.stripFlags = msg\n        .slice(54, 62)\n        .toString('hex')\n        .match(/.{2}/g)!\n        .map(function(x) {\n          return parseInt(x, 16);\n        });\n    }\n\n    if (msg.length >= 66) {\n      deviceData.pusherFlags = msg.readInt32LE(62);\n    }\n\n    let newDevice: Device = new Device(deviceData);\n\n    newDevice.sendPacket = (packet: Buffer, deviceData: DeviceData) => {\n      this.socket.send(packet, 0, packet.length, deviceData.myPort, deviceData.ipAddress);\n    };\n    this.devices[mac] = newDevice;\n\n    this.emit('discover', newDevice);\n  }\n}\n"],"names":["dgram.createSocket"],"mappings":"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"}