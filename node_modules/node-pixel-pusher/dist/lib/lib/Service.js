"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dgram = require("dgram");
var Device_1 = require("./Device");
var events_1 = require("events");
var LISTENER_SOCKET_PORT = 7331;
var Service = /** @class */ (function (_super) {
    __extends(Service, _super);
    function Service() {
        var _this = _super.call(this) || this;
        _this.devices = {};
        _this.socket = dgram.createSocket('udp4');
        _this.socket.on('message', _this.onMessage.bind(_this));
        _this.socket.on('listening', function () {
            var address = _this.socket.address();
            console.log('Socket listening for PixelPusher on udp://*:' + address.port);
        });
        _this.socket.on('error', function (err) {
            console.log('Error opening socket to detect PixelPusher', err);
        });
        _this.socket.bind(LISTENER_SOCKET_PORT);
        return _this;
    }
    Service.prototype.close = function () {
        this.socket.close();
    };
    Service.prototype.onMessage = function (msg, rinfo) {
        var _this = this;
        if (msg.length < 48) {
            return;
        }
        var mac = msg
            .slice(0, 6)
            .toString('hex')
            .match(/.{2}/g)
            .join(':');
        if (!mac) {
            return;
        }
        var controller = this.devices[mac];
        if (controller && controller.deviceData.deviceType === 2) {
            // Already received message from this device
            var cycleTime = msg.readUInt32LE(28) / 1000;
            var delta = msg.readUInt32LE(36);
            if (delta > 5) {
                cycleTime += 5;
            }
            else if (delta === 0 && cycleTime > 1) {
                cycleTime -= 1;
            }
            controller.deviceData.updatePeriod = cycleTime;
            controller.deviceData.powerTotal = msg.readUInt32LE(32);
            controller.deviceData.deltaSequence = delta;
            return;
        }
        var ipAddress = msg
            .slice(6, 10)
            .toString('hex')
            .match(/.{2}/g)
            .map(function (x) {
            return parseInt(x, 16);
        })
            .join('.');
        if (!ipAddress) {
            return;
        }
        var deviceType = msg[10];
        if (deviceType !== 2) {
            // Must be PixelPusher device type
            return;
        }
        console.log("PixelPusher Device discovered at " + ipAddress + " [" + mac + "]");
        var deviceData = {
            macAddress: mac,
            ipAddress: ipAddress,
            deviceType: msg[10],
            protocolVrsn: msg[11],
            vendorID: msg.readUInt16LE(12),
            productID: msg.readUInt16LE(14),
            hardwareRev: msg.readUInt16LE(16),
            softwareRev: msg.readUInt16LE(18),
            linkSpeed: msg.readUInt32LE(20),
            numberStrips: msg[24],
            stripsPerPkt: msg[25],
            pixelsPerStrip: msg.readUInt16LE(26),
            updatePeriod: msg.readUInt32LE(28) / 1000,
            powerTotal: msg.readUInt32LE(32),
            deltaSequence: msg.readUInt32LE(36),
            controllerNo: msg.readInt32LE(40),
            groupNo: msg.readInt32LE(44),
            myPort: 9761
        };
        if (msg.length >= 54) {
            deviceData.artnetUniverse = msg.readUInt16LE(48);
            deviceData.artnetChannel = msg.readUInt16LE(50);
            deviceData.myPort = msg.readUInt16LE(52);
        }
        if (msg.length >= 62) {
            deviceData.stripFlags = msg
                .slice(54, 62)
                .toString('hex')
                .match(/.{2}/g)
                .map(function (x) {
                return parseInt(x, 16);
            });
        }
        if (msg.length >= 66) {
            deviceData.pusherFlags = msg.readInt32LE(62);
        }
        var newDevice = new Device_1.default(deviceData);
        newDevice.sendPacket = function (packet, deviceData) {
            _this.socket.send(packet, 0, packet.length, deviceData.myPort, deviceData.ipAddress);
        };
        this.devices[mac] = newDevice;
        this.emit('discover', newDevice);
    };
    return Service;
}(events_1.EventEmitter));
exports.Service = Service;
//# sourceMappingURL=Service.js.map